/**
 * @file src/logger/Logger.ts
 * @version 2
 * @description –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Event Bus
 * @changelog
 *   2 - –í—Å–µ exchange —Å–æ–±—ã—Ç–∏—è –∏–¥—É—Ç –≤ –∫–∞–Ω–∞–ª system (2025-01-22)
 *   1 - –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pong –ª–æ–≥–æ–≤, —É–±—Ä–∞–Ω –ª–æ–≥ ping:sent (2025-01-22)
 *   0 - –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è (2025-01-22)
 */

import * as fs from "fs";
import * as path from "path";
import chalk from "chalk";
import { eventBus } from "../core/EventBus";
import { LogLevel, LogCategory, LogMessage, LoggerConfig } from "./types";
import { config } from "../config/env";
import { EMOJI } from "../config/constants";

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Event Bus
 *
 * –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ –∏ –∫–∞–Ω–∞–ª—ã WebSocket:
 * - LogCategory.SYSTEM ‚Üí –∫–∞–Ω–∞–ª 'system' (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
 * - LogCategory.EXCHANGE ‚Üí –∫–∞–Ω–∞–ª 'system' (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
 * - LogCategory.INTERNAL ‚Üí –∫–∞–Ω–∞–ª 'logs' (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)
 */
class Logger {
  private static instance: Logger;
  private config: LoggerConfig;

  /**
   * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
   */
  private levelPriority: Record<LogLevel, number> = {
    [LogLevel.DEBUG]: 0,
    [LogLevel.INFO]: 1,
    [LogLevel.SUCCESS]: 1,
    [LogLevel.WARN]: 2,
    [LogLevel.ERROR]: 3,
  };

  private constructor() {
    this.config = {
      level: config.logging.level as LogLevel,
      toFile: config.logging.toFile,
      dir: config.logging.dir,
      colors: true,
    };

    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.config.toFile) {
      this.ensureLogDir();
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.setupEventListeners();
  }

  /**
   * Singleton pattern
   */
  public static getInstance(): Logger {
    if (!Logger.instance) {
      Logger.instance = new Logger();
    }
    return Logger.instance;
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   *
   * ‚úÖ –í–ê–ñ–ù–û: –°–æ–±—ã—Ç–∏—è exchange:* –∏ system:* –∏–¥—É—Ç –≤ –∫–∞–Ω–∞–ª 'system'
   */
  private setupEventListeners(): void {
    // ==================== EXCHANGE –°–û–ë–´–¢–ò–Ø (–∫–∞–Ω–∞–ª system) ====================

    eventBus.on("exchange:connected", () => {
      this.success("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", LogCategory.EXCHANGE);
    });

    eventBus.on("exchange:disconnected", (data: any) => {
      this.warn(
        `‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: ${data?.reason || "unknown"}`,
        LogCategory.EXCHANGE
      );
    });

    eventBus.on("exchange:reconnecting", (data: any) => {
      this.info(
        `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket (–ø–æ–ø—ã—Ç–∫–∞ ${data?.attempt || "?"})...`,
        LogCategory.EXCHANGE
      );
    });

    eventBus.on("exchange:ping:sent", (data: any) => {
      const time = new Date(data?.timestamp).toISOString();
      this.debug(`üèì PING –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω [${time}]`, LogCategory.EXCHANGE);
    });

    eventBus.on("exchange:pong:received", (data: any) => {
      const time = new Date(data?.timestamp).toISOString();
      const latency = data?.latency || "?";
      this.info(
        `üèì PONG –ø–æ–ª—É—á–µ–Ω [${time}] –∑–∞–¥–µ—Ä–∂–∫–∞: ${latency}ms`,
        LogCategory.EXCHANGE
      );
    });

    eventBus.on("exchange:pong:timeout", () => {
      this.warn("‚ö†Ô∏è PONG –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥", LogCategory.EXCHANGE);
    });

    eventBus.on("exchange:subscribed", (data: any) => {
      this.info(
        `üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –±–∏—Ä–∂–∏: ${data?.channel}`,
        LogCategory.EXCHANGE
      );
    });

    eventBus.on("exchange:error", (data: any) => {
      this.error("‚ùå –û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ Gate.io", LogCategory.EXCHANGE, data);
    });

    // ==================== SYSTEM –°–û–ë–´–¢–ò–Ø (–∫–∞–Ω–∞–ª system) ====================

    eventBus.on("system:startup", () => {
      this.success("üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", LogCategory.SYSTEM);
    });

    eventBus.on("system:shutdown", () => {
      this.info("üõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...", LogCategory.SYSTEM);
    });

    eventBus.on("system:ready", () => {
      this.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ", LogCategory.SYSTEM);
    });

    eventBus.on("system:error", (data: any) => {
      this.error("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", LogCategory.SYSTEM, data);
    });

    // ==================== CLIENT –°–û–ë–´–¢–ò–Ø (–∫–∞–Ω–∞–ª system) ====================

    eventBus.on("client:connected", (clientId: string) => {
      this.info(`üë§ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${clientId}`, LogCategory.SYSTEM);
    });

    eventBus.on("client:disconnected", (clientId: string) => {
      this.info(`üë§ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${clientId}`, LogCategory.SYSTEM);
    });

    // ==================== DATA –°–û–ë–´–¢–ò–Ø (–∫–∞–Ω–∞–ª logs) ====================

    eventBus.on("data:orderbook:synced", (data: any) => {
      this.debug(
        `üìñ Order Book —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${data?.symbol}`,
        LogCategory.INTERNAL
      );
    });

    // ==================== TRADING –°–û–ë–´–¢–ò–Ø (–∫–∞–Ω–∞–ª logs) ====================

    eventBus.on("trading:order:created", (data: any) => {
      this.info(`üìù –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ${data?.id}`, LogCategory.INTERNAL, data);
    });

    eventBus.on("trading:order:filled", (data: any) => {
      this.success(
        `‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: ${data?.id}`,
        LogCategory.INTERNAL,
        data
      );
    });

    eventBus.on("trading:position:opened", (data: any) => {
      this.success(
        `üéØ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: ${data?.side} ${data?.symbol}`,
        LogCategory.INTERNAL,
        data
      );
    });

    eventBus.on("trading:position:closed", (data: any) => {
      const emoji = data?.pnl > 0 ? "üí∞" : "üí∏";
      this.success(
        `${emoji} –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: PnL ${data?.pnl}`,
        LogCategory.INTERNAL,
        data
      );
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   */
  private shouldLog(level: LogLevel): boolean {
    return this.levelPriority[level] >= this.levelPriority[this.config.level];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp
   */
  private formatTimestamp(timestamp: number): string {
    const date = new Date(timestamp);
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    const seconds = String(date.getSeconds()).padStart(2, "0");
    const ms = String(date.getMilliseconds()).padStart(3, "0");

    return `${hours}:${minutes}:${seconds}.${ms}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Å —Ü–≤–µ—Ç–∞–º–∏)
   */
  private formatConsoleMessage(logMsg: LogMessage): string {
    const time = this.formatTimestamp(logMsg.timestamp);
    const category = logMsg.category.toUpperCase().padEnd(8);

    // –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    let levelStr = "";
    switch (logMsg.level) {
      case LogLevel.DEBUG:
        levelStr = chalk.gray(`[DEBUG]`);
        break;
      case LogLevel.INFO:
        levelStr = chalk.blue(`[INFO]`);
        break;
      case LogLevel.SUCCESS:
        levelStr = chalk.green(`[SUCCESS]`);
        break;
      case LogLevel.WARN:
        levelStr = chalk.yellow(`[WARN]`);
        break;
      case LogLevel.ERROR:
        levelStr = chalk.red(`[ERROR]`);
        break;
    }

    // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    let categoryStr = "";
    switch (logMsg.category) {
      case LogCategory.SYSTEM:
        categoryStr = chalk.cyan(`[${category}]`);
        break;
      case LogCategory.EXCHANGE:
        categoryStr = chalk.magenta(`[${category}]`);
        break;
      case LogCategory.INTERNAL:
        categoryStr = chalk.gray(`[${category}]`);
        break;
    }

    const timeStr = chalk.dim(`[${time}]`);

    return `${timeStr} ${levelStr} ${categoryStr} ${logMsg.message}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
   */
  private formatFileMessage(logMsg: LogMessage): string {
    const time = new Date(logMsg.timestamp).toISOString();
    const level = logMsg.level.toUpperCase().padEnd(7);
    const category = logMsg.category.toUpperCase().padEnd(8);

    let msg = `[${time}] [${level}] [${category}] ${logMsg.message}`;

    if (logMsg.data) {
      msg += `\nData: ${JSON.stringify(logMsg.data, null, 2)}`;
    }

    return msg;
  }

  /**
   * –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
   */
  private writeToFile(logMsg: LogMessage): void {
    if (!this.config.toFile) return;

    try {
      const date = new Date().toISOString().split("T")[0]; // YYYY-MM-DD
      const filename = `dtrader-${date}.log`;
      const filepath = path.join(this.config.dir, filename);

      const message = this.formatFileMessage(logMsg) + "\n";

      fs.appendFileSync(filepath, message, "utf8");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª:", error);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
   */
  private ensureLogDir(): void {
    if (!fs.existsSync(this.config.dir)) {
      fs.mkdirSync(this.config.dir, { recursive: true });
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   *
   * ‚úÖ –í–ê–ñ–ù–û: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º WebSocket:
   * - LogCategory.SYSTEM ‚Üí –∫–∞–Ω–∞–ª 'system'
   * - LogCategory.EXCHANGE ‚Üí –∫–∞–Ω–∞–ª 'system'
   * - LogCategory.INTERNAL ‚Üí –∫–∞–Ω–∞–ª 'logs'
   */
  private log(
    level: LogLevel,
    message: string,
    category: LogCategory,
    data?: any
  ): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    if (!this.shouldLog(level)) {
      return;
    }

    const logMsg: LogMessage = {
      level,
      category,
      message,
      timestamp: Date.now(),
      data,
    };

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(this.formatConsoleMessage(logMsg));

    // –ï—Å–ª–∏ –µ—Å—Ç—å data, –≤—ã–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
    if (data && this.config.level === "debug") {
      console.log(chalk.dim(JSON.stringify(data, null, 2)));
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    this.writeToFile(logMsg);

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã WebSocket
    // SYSTEM –∏ EXCHANGE ‚Üí –∫–∞–Ω–∞–ª 'system' (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
    // INTERNAL ‚Üí –∫–∞–Ω–∞–ª 'logs' (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)

    if (category === LogCategory.SYSTEM || category === LogCategory.EXCHANGE) {
      // –≠—Ç–∏ –ª–æ–≥–∏ –∏–¥—É—Ç –≤ –∫–∞–Ω–∞–ª 'system'
      eventBus.emitSafe("client:broadcast", {
        channel: "system",
        message: {
          type: "log",
          level,
          message,
          source: "server",
          category,
          timestamp: logMsg.timestamp,
        },
      });
    } else if (category === LogCategory.INTERNAL) {
      // –≠—Ç–∏ –ª–æ–≥–∏ –∏–¥—É—Ç –≤ –∫–∞–Ω–∞–ª 'logs'
      eventBus.emitSafe("client:broadcast", {
        channel: "logs",
        message: {
          type: "log",
          level,
          message,
          source: "server",
          category,
          timestamp: logMsg.timestamp,
        },
      });
    }
  }

  /**
   * –£—Ä–æ–≤–µ–Ω—å DEBUG
   */
  public debug(
    message: string,
    category: LogCategory = LogCategory.INTERNAL,
    data?: any
  ): void {
    this.log(LogLevel.DEBUG, message, category, data);
  }

  /**
   * –£—Ä–æ–≤–µ–Ω—å INFO
   */
  public info(
    message: string,
    category: LogCategory = LogCategory.INTERNAL,
    data?: any
  ): void {
    this.log(LogLevel.INFO, message, category, data);
  }

  /**
   * –£—Ä–æ–≤–µ–Ω—å SUCCESS
   */
  public success(
    message: string,
    category: LogCategory = LogCategory.INTERNAL,
    data?: any
  ): void {
    this.log(LogLevel.SUCCESS, message, category, data);
  }

  /**
   * –£—Ä–æ–≤–µ–Ω—å WARN
   */
  public warn(
    message: string,
    category: LogCategory = LogCategory.INTERNAL,
    data?: any
  ): void {
    this.log(LogLevel.WARN, message, category, data);
  }

  /**
   * –£—Ä–æ–≤–µ–Ω—å ERROR
   */
  public error(
    message: string,
    category: LogCategory = LogCategory.INTERNAL,
    data?: any
  ): void {
    this.log(LogLevel.ERROR, message, category, data);
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Logger
 */
export const logger = Logger.getInstance();
