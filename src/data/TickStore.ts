/**
 * @file src/data/TickStore.ts
 * @version 0
 * @description –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∏–∫–æ–≤ (circular buffer)
 * @changelog
 *   0 - –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è (2025-01-22)
 */

import { eventBus } from "../core/EventBus";
import { logger } from "../logger/Logger";
import { LogCategory } from "../logger/types";
import { STORAGE } from "../config/constants";
import { Tick } from "./types";
import { config } from "../config/env";

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∏–∫–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (circular buffer)
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –•—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
 * - –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–∏–∫–∞–º
 * - –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã, –æ–±—ä—ë–º–∞ –∏ —Ç.–¥.
 *
 * @example
 * const tickStore = new TickStore('ETH_USDT', 1000);
 *
 * // –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫
 * tickStore.add({
 *   symbol: 'ETH_USDT',
 *   price: 3820.5,
 *   volume: 12345.67,
 *   timestamp: Date.now(),
 * });
 *
 * // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫
 * const lastTick = tickStore.getLast();
 *
 * // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–∏–∫–æ–≤
 * const avgPrice = tickStore.getAveragePrice(100);
 */
export class TickStore {
  private symbol: string;
  private maxSize: number;
  private ticks: Tick[] = [];
  private tickCount: number = 0;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   *
   * @param symbol - —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
   * @param maxSize - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
   */
  constructor(symbol: string, maxSize: number = STORAGE.TICK_STORE.MAX_SIZE) {
    this.symbol = symbol;
    this.maxSize = maxSize;

    logger.debug(
      `TickStore —Å–æ–∑–¥–∞–Ω –¥–ª—è ${symbol} (–º–∞–∫—Å. ${maxSize} —Ç–∏–∫–æ–≤)`,
      LogCategory.INTERNAL
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç–∏–∫–æ–≤
    this.setupEventListeners();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
   */
  private setupEventListeners(): void {
    eventBus.on("data:tick:received", (tick: Tick) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Å–∏–º–≤–æ–ª
      if (tick.symbol === this.symbol) {
        this.add(tick);
      }
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫
   *
   * @param tick - –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–∞
   */
  public add(tick: Tick): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    this.ticks.push(tick);
    this.tickCount++;

    // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç - —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
    if (this.ticks.length > this.maxSize) {
      this.ticks.shift();
    }

    logger.debug(
      `–¢–∏–∫ #${this.tickCount} –¥–æ–±–∞–≤–ª–µ–Ω: ${tick.price} (–≤ –±—É—Ñ–µ—Ä–µ: ${this.ticks.length})`,
      LogCategory.INTERNAL
    );

    // –ö–∞–∂–¥—ã–µ 5 —Ç–∏–∫–æ–≤ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥
    if (this.tickCount % 5 === 0) {
      logger.info(
        `üìä –¢–∏–∫ #${this.tickCount}: ${tick.symbol} @ ${tick.price.toFixed(2)} USDT (24—á: ${tick.change24h.toFixed(2)}%)`,
        LogCategory.INTERNAL
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫
   *
   * @returns –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫ –∏–ª–∏ undefined –µ—Å–ª–∏ –ø—É—Å—Ç–æ
   */
  public getLast(): Tick | undefined {
    return this.ticks[this.ticks.length - 1];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–∏–∫–æ–≤
   *
   * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤
   * @returns –º–∞—Å—Å–∏–≤ —Ç–∏–∫–æ–≤ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
   */
  public getLastN(count: number): Tick[] {
    if (count >= this.ticks.length) {
      return [...this.ticks];
    }

    return this.ticks.slice(-count);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
   *
   * @param periodMs - –ø–µ—Ä–∏–æ–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns –º–∞—Å—Å–∏–≤ —Ç–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
   *
   * @example
   * // –¢–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
   * const ticks = tickStore.getForPeriod(60000);
   */
  public getForPeriod(periodMs: number): Tick[] {
    const now = Date.now();
    const cutoff = now - periodMs;

    return this.ticks.filter((tick) => tick.timestamp >= cutoff);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–∫–∏
   *
   * @returns –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ç–∏–∫–æ–≤
   */
  public getAll(): Tick[] {
    return [...this.ticks];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ
   *
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤
   */
  public getCount(): number {
    return this.ticks.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–æ–≤ (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª—ë–Ω–Ω—ã–µ)
   *
   * @returns –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
   */
  public getTotalCount(): number {
    return this.tickCount;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–∏–∫–æ–≤
   *
   * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
   * @returns —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
   */
  public getAveragePrice(count?: number): number {
    const ticks = count ? this.getLastN(count) : this.ticks;

    if (ticks.length === 0) {
      return 0;
    }

    const sum = ticks.reduce((acc, tick) => acc + tick.price, 0);
    return sum / ticks.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–∏–∫–æ–≤
   *
   * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
   * @returns –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
   */
  public getMinPrice(count?: number): number {
    const ticks = count ? this.getLastN(count) : this.ticks;

    if (ticks.length === 0) {
      return 0;
    }

    return Math.min(...ticks.map((t) => t.price));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–∏–∫–æ–≤
   *
   * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
   * @returns –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
   */
  public getMaxPrice(count?: number): number {
    const ticks = count ? this.getLastN(count) : this.ticks;

    if (ticks.length === 0) {
      return 0;
    }

    return Math.max(...ticks.map((t) => t.price));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç–∏–∫–æ–≤
   *
   * @param count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)
   * @returns —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
   */
  public getAverageVolume(count?: number): number {
    const ticks = count ? this.getLastN(count) : this.ticks;

    if (ticks.length === 0) {
      return 0;
    }

    const sum = ticks.reduce((acc, tick) => acc + tick.volume, 0);
    return sum / ticks.length;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –±—É—Ñ–µ—Ä
   *
   * @returns true –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω
   */
  public isFull(): boolean {
    return this.ticks.length >= this.maxSize;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä
   */
  public clear(): void {
    this.ticks = [];
    logger.debug(`TickStore –æ—á–∏—â–µ–Ω –¥–ª—è ${this.symbol}`, LogCategory.INTERNAL);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   *
   * @returns –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  public getStats(): {
    symbol: string;
    count: number;
    totalCount: number;
    isFull: boolean;
    lastPrice: number;
    avgPrice: number;
    minPrice: number;
    maxPrice: number;
    avgVolume: number;
  } {
    const lastTick = this.getLast();

    return {
      symbol: this.symbol,
      count: this.getCount(),
      totalCount: this.getTotalCount(),
      isFull: this.isFull(),
      lastPrice: lastTick?.price || 0,
      avgPrice: this.getAveragePrice(),
      minPrice: this.getMinPrice(),
      maxPrice: this.getMaxPrice(),
      avgVolume: this.getAverageVolume(),
    };
  }
}

// Singleton —ç–∫—Å–ø–æ—Ä—Ç
export const tickStore = new TickStore(config.trading.symbol);
