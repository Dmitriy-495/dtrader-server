import { Candle, Timeframe, CandleStats, TIMEFRAME_MS } from "./types";
import { config } from "../config/env";
import { logger } from "../logger/Logger";
import { LogCategory } from "../logger/types";

/**
 * CandleStore - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤–µ—á–µ–π –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * - 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Circular Buffer –¥–ª—è 1m, 6m, 24m
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
 * - –ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–µ–π
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
 */
class CandleStore {
  private readonly symbol: string;

  // ============================================================================
  // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–£–§–ï–†–û–í
  // ============================================================================

  private readonly bufferSizes: Record<Timeframe, number> = {
    "1m": 500, // ~8 —á–∞—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
    "6m": 240, // ~24 —á–∞—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏
    "24m": 120, // ~48 —á–∞—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
  };

  // ============================================================================
  // –•–†–ê–ù–ò–õ–ò–©–ï
  // ============================================================================

  private candles: Record<Timeframe, Candle[]> = {
    "1m": [],
    "6m": [],
    "24m": [],
  };

  private totalCounts: Record<Timeframe, number> = {
    "1m": 0,
    "6m": 0,
    "24m": 0,
  };

  // ============================================================================
  // –ö–û–ù–°–¢–†–£–ö–¢–û–†
  // ============================================================================

  constructor(symbol: string) {
    this.symbol = symbol;
    logger.info(
      `üìä CandleStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${symbol}`,
      LogCategory.INTERNAL
    );
  }

  // ============================================================================
  // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================================================

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–≤–µ—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω - —É–¥–∞–ª—è–µ—Ç —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é
   */
  public add(timeframe: Timeframe, candle: Candle): void {
    const buffer = this.candles[timeframe];
    const maxSize = this.bufferSizes[timeframe];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if (this.isDuplicate(timeframe, candle)) {
      logger.warn(
        `‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–≤–µ—á–∏ ${timeframe} @ ${new Date(
          candle.timestamp
        ).toISOString()}`,
        LogCategory.INTERNAL
      );
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É
    buffer.push(candle);
    this.totalCounts[timeframe]++;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (buffer.length > maxSize) {
      const removed = buffer.shift();
      logger.debug(
        `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞ ${timeframe} @ ${new Date(
          removed!.timestamp
        ).toISOString()}`,
        LogCategory.INTERNAL
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (6m –∏ 24m)
    if (timeframe === "6m" || timeframe === "24m") {
      const date = new Date(candle.timestamp);
      logger.success(
        `‚úÖ –°–≤–µ—á–∞ ${timeframe} [${date.toISOString()}]: ` +
          `O=${candle.open.toFixed(2)} H=${candle.high.toFixed(2)} ` +
          `L=${candle.low.toFixed(2)} C=${candle.close.toFixed(2)} ` +
          `V=${candle.volume.toFixed(4)}`,
        LogCategory.INTERNAL
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
   */
  public getLast(timeframe: Timeframe): Candle | undefined {
    const buffer = this.candles[timeframe];
    return buffer[buffer.length - 1];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
   */
  public getLastN(timeframe: Timeframe, count: number): Candle[] {
    const buffer = this.candles[timeframe];
    return buffer.slice(-count);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—á–∏
   */
  public getAll(timeframe: Timeframe): Candle[] {
    return [...this.candles[timeframe]];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
   */
  public getForPeriod(timeframe: Timeframe, periodMs: number): Candle[] {
    const now = Date.now();
    const cutoff = now - periodMs;
    return this.candles[timeframe].filter((c) => c.timestamp >= cutoff);
  }

  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –±—É—Ñ–µ—Ä–µ
   */
  public getCount(timeframe: Timeframe): number {
    return this.candles[timeframe].length;
  }

  /**
   * –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π
   */
  public getTotalCount(timeframe: Timeframe): number {
    return this.totalCounts[timeframe];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
   */
  private isDuplicate(timeframe: Timeframe, candle: Candle): boolean {
    const last = this.getLast(timeframe);
    return last?.timestamp === candle.timestamp;
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –±—É—Ñ–µ—Ä
   */
  public isFull(timeframe: Timeframe): boolean {
    return this.candles[timeframe].length >= this.bufferSizes[timeframe];
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
   */
  public getStats(timeframe: Timeframe): CandleStats {
    const buffer = this.candles[timeframe];

    if (buffer.length === 0) {
      return {
        timeframe,
        count: 0,
        totalCount: this.totalCounts[timeframe],
        isFull: false,
        lastClose: null,
        avgVolume: 0,
        avgQuoteVolume: 0,
        highestHigh: null,
        lowestLow: null,
        lastTimestamp: null,
        oldestTimestamp: null,
      };
    }

    const avgVolume =
      buffer.reduce((sum, c) => sum + c.volume, 0) / buffer.length;
    const avgQuoteVolume =
      buffer.reduce((sum, c) => sum + c.quoteVolume, 0) / buffer.length;
    const highestHigh = Math.max(...buffer.map((c) => c.high));
    const lowestLow = Math.min(...buffer.map((c) => c.low));
    const last = buffer[buffer.length - 1];
    const oldest = buffer[0];

    return {
      timeframe,
      count: buffer.length,
      totalCount: this.totalCounts[timeframe],
      isFull: this.isFull(timeframe),
      lastClose: last.close,
      avgVolume,
      avgQuoteVolume,
      highestHigh,
      lowestLow,
      lastTimestamp: last.timestamp,
      oldestTimestamp: oldest.timestamp,
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä (–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
   */
  public clear(timeframe?: Timeframe): void {
    if (timeframe) {
      this.candles[timeframe] = [];
      logger.info(`üóëÔ∏è –ë—É—Ñ–µ—Ä ${timeframe} –æ—á–∏—â–µ–Ω`, LogCategory.INTERNAL);
    } else {
      this.candles = { "1m": [], "6m": [], "24m": [] };
      this.totalCounts = { "1m": 0, "6m": 0, "24m": 0 };
      logger.info("üóëÔ∏è –í—Å–µ –±—É—Ñ–µ—Ä—ã —Å–≤–µ—á–µ–π –æ—á–∏—â–µ–Ω—ã", LogCategory.INTERNAL);
    }
  }
}

// Singleton —ç–∫—Å–ø–æ—Ä—Ç
export const candleStore = new CandleStore(config.trading.symbol);
