/**
 * @file src/data/OrderBookStore.ts
 * @version 2.0.0 - –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê
 * @description –•—Ä–∞–Ω–∏–ª–∏—â–µ Order Book —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @changelog
 *   2.0.0 - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏ (2025-01-22)
 *   1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–º–∏ bid/ask (2025-01-22)
 *   0 - –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è (2025-01-22)
 */

import { eventBus } from "../core/EventBus";
import { logger } from "../logger/Logger";
import { LogCategory } from "../logger/types";
import { GateioClient } from "../exchange/GateioClient";
import {
  OrderBookLevel,
  OrderBookUpdate,
  OrderBookSnapshot,
  OrderBookStats,
} from "./types";

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ Order Book
 *
 * –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
 * 1. REST API (sync) - –ø–æ–ª–Ω—ã–π snapshot
 * 2. WebSocket (applyUpdate) - –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 *
 * –õ–û–ì–ò–ö–ê:
 * 1. –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: sync() –ø–æ–ª—É—á–∞–µ—Ç snapshot —á–µ—Ä–µ–∑ REST
 * 2. WebSocket —à–ª—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Üí applyUpdate() –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö
 * 3. –ö–∞–∂–¥—ã–π —á–∞—Å: sync() –∑–∞–Ω–æ–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
 */
export class OrderBookStore {
  private symbol: string;
  private gateioClient: GateioClient;

  // –î–∞–Ω–Ω—ã–µ orderbook
  private bids: Map<number, number> = new Map();
  private asks: Map<number, number> = new Map();
  private lastUpdateId: number = 0;
  private lastSyncTime: number = 0;
  private updateCount: number = 0;

  private maxLevels: number = 20;
  private syncInterval: number = 3600000; // 1 —á–∞—Å

  constructor(
    symbol: string,
    gateioClient: GateioClient,
    maxLevels: number = 20
  ) {
    this.symbol = symbol;
    this.gateioClient = gateioClient;
    this.maxLevels = maxLevels;

    logger.debug(
      `üìñ OrderBookStore —Å–æ–∑–¥–∞–Ω –¥–ª—è ${symbol} (–º–∞–∫—Å. ${maxLevels} —É—Ä–æ–≤–Ω–µ–π)`,
      LogCategory.INTERNAL
    );

    this.setupEventListeners();
    this.startPeriodicSync();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket —Å–æ–±—ã—Ç–∏—è
   */
  private setupEventListeners(): void {
    eventBus.on("data:orderbook:updated", (update: OrderBookUpdate) => {
      if (update.symbol === this.symbol) {
        this.applyUpdate(update);
      }
    });
  }

  /**
   * –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ REST API
   */
  public async sync(): Promise<void> {
    try {
      logger.info(
        `üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Order Book –¥–ª—è ${this.symbol} —á–µ—Ä–µ–∑ REST API...`,
        LogCategory.INTERNAL
      );

      const orderBook = await this.gateioClient.getOrderBook(
        this.symbol,
        this.maxLevels
      );

      // üîç DEBUG: –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –†–ï–ê–õ–¨–ù–û –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç Gate.io
      logger.debug(`üì¶ RAW –¥–∞–Ω–Ω—ã–µ –æ—Ç REST API`, LogCategory.INTERNAL, {
        id: orderBook.id,
        bidsCount: orderBook.bids.length,
        asksCount: orderBook.asks.length,
        firstBid: orderBook.bids[0],
        firstAsk: orderBook.asks[0],
        bidType: typeof orderBook.bids[0],
        bidIsArray: Array.isArray(orderBook.bids[0]),
      });

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      this.bids.clear();
      this.asks.clear();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º bids
      orderBook.bids.forEach((level, index) => {
        // üîç Gate.io REST API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ú–ê–°–°–ò–í–´: ["price", "amount"]
        // –ê –Ω–µ –æ–±—ä–µ–∫—Ç—ã: {price: "...", amount: "..."}
        let price: number;
        let amount: number;

        if (Array.isArray(level)) {
          // –§–æ—Ä–º–∞—Ç: ["3890.50", "1.5"]
          price = parseFloat(level[0]);
          amount = parseFloat(level[1]);
        } else if (typeof level === "object" && level !== null) {
          // –§–æ—Ä–º–∞—Ç: {price: "3890.50", amount: "1.5"}
          price = parseFloat((level as any).price);
          amount = parseFloat((level as any).amount);
        } else {
          logger.warn(
            `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç bid #${index}`,
            LogCategory.INTERNAL,
            { level }
          );
          return;
        }

        if (isNaN(price) || isNaN(amount)) {
          logger.warn(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bid: price=${price}, amount=${amount}`,
            LogCategory.INTERNAL
          );
          return;
        }

        this.bids.set(price, amount);
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º asks
      orderBook.asks.forEach((level, index) => {
        let price: number;
        let amount: number;

        if (Array.isArray(level)) {
          price = parseFloat(level[0]);
          amount = parseFloat(level[1]);
        } else if (typeof level === "object" && level !== null) {
          price = parseFloat((level as any).price);
          amount = parseFloat((level as any).amount);
        } else {
          logger.warn(
            `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ask #${index}`,
            LogCategory.INTERNAL,
            { level }
          );
          return;
        }

        if (isNaN(price) || isNaN(amount)) {
          logger.warn(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ask: price=${price}, amount=${amount}`,
            LogCategory.INTERNAL
          );
          return;
        }

        this.asks.set(price, amount);
      });

      this.lastUpdateId = orderBook.id;
      this.lastSyncTime = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      const stats = this.getStats();

      logger.success(
        `‚úÖ Order Book —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${this.bids.size} bids, ${this.asks.size} asks`,
        LogCategory.INTERNAL
      );

      logger.info(
        `üìä –õ—É—á—à–∏–µ —Ü–µ–Ω—ã: bid=${stats.bestBid.toFixed(
          2
        )}, ask=${stats.bestAsk.toFixed(2)}, spread=${stats.spread.toFixed(2)}`,
        LogCategory.INTERNAL
      );

      eventBus.emitSafe("data:orderbook:synced", {
        symbol: this.symbol,
        bidsCount: this.bids.size,
        asksCount: this.asks.size,
        bestBid: stats.bestBid,
        bestAsk: stats.bestAsk,
        timestamp: Date.now(),
      });
    } catch (error: any) {
      logger.error(
        `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Order Book: ${error.message}`,
        LogCategory.INTERNAL
      );
      throw error;
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç WebSocket
   */
  private applyUpdate(update: OrderBookUpdate): void {
    this.updateCount++;

    let bidsChanged = 0;
    let asksChanged = 0;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è bids
    update.bids.forEach((level) => {
      if (level.amount === 0) {
        // –£–¥–∞–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        if (this.bids.delete(level.price)) {
          bidsChanged++;
        }
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        this.bids.set(level.price, level.amount);
        bidsChanged++;
      }
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è asks
    update.asks.forEach((level) => {
      if (level.amount === 0) {
        if (this.asks.delete(level.price)) {
          asksChanged++;
        }
      } else {
        this.asks.set(level.price, level.amount);
        asksChanged++;
      }
    });

    this.lastUpdateId = update.updateId;

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (bidsChanged > 0 || asksChanged > 0) {
      logger.debug(
        `üìà OrderBook –æ–±–Ω–æ–≤–ª—ë–Ω #${this.updateCount}: ${bidsChanged} bids, ${asksChanged} asks –∏–∑–º–µ–Ω–µ–Ω–æ`,
        LogCategory.INTERNAL
      );
    }

    // –ö–∞–∂–¥—ã–µ 20 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥
    if (this.updateCount % 20 === 0) {
      const stats = this.getStats();
      logger.info(
        `üìñ OrderBook #${this.updateCount}: bid ${stats.bestBid.toFixed(2)} | ask ${stats.bestAsk.toFixed(2)} | spread ${stats.spread.toFixed(2)} (${stats.spreadPercent.toFixed(3)}%) | –¥–∞–≤–ª–µ–Ω–∏–µ: ${stats.bidPercent.toFixed(1)}% / ${stats.askPercent.toFixed(1)}%`,
        LogCategory.INTERNAL
      );
    }
  }

  /**
   * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  private startPeriodicSync(): void {
    setInterval(async () => {
      const timeSinceSync = Date.now() - this.lastSyncTime;

      if (timeSinceSync >= this.syncInterval) {
        logger.info(
          "‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Order Book...",
          LogCategory.INTERNAL
        );

        try {
          await this.sync();
        } catch (error) {
          logger.error(
            "–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            LogCategory.INTERNAL,
            error
          );
        }
      }
    }, this.syncInterval);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å snapshot —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞
   */
  public getSnapshot(): OrderBookSnapshot {
    // Bids: –æ—Ç –≤—ã—Å—à–µ–π —Ü–µ–Ω—ã –∫ –Ω–∏–∑—à–µ–π
    const sortedBids = Array.from(this.bids.entries())
      .sort((a, b) => b[0] - a[0])
      .slice(0, this.maxLevels)
      .map(([price, amount]) => ({ price, amount }));

    // Asks: –æ—Ç –Ω–∏–∑—à–µ–π —Ü–µ–Ω—ã –∫ –≤—ã—Å—à–µ–π
    const sortedAsks = Array.from(this.asks.entries())
      .sort((a, b) => a[0] - b[0])
      .slice(0, this.maxLevels)
      .map(([price, amount]) => ({ price, amount }));

    return {
      symbol: this.symbol,
      bids: sortedBids,
      asks: sortedAsks,
      timestamp: Date.now(),
      lastUpdateId: this.lastUpdateId,
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å N –ª—É—á—à–∏—Ö bids
   */
  public getBids(count: number = this.maxLevels): OrderBookLevel[] {
    return Array.from(this.bids.entries())
      .sort((a, b) => b[0] - a[0])
      .slice(0, count)
      .map(([price, amount]) => ({ price, amount }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å N –ª—É—á—à–∏—Ö asks
   */
  public getAsks(count: number = this.maxLevels): OrderBookLevel[] {
    return Array.from(this.asks.entries())
      .sort((a, b) => a[0] - b[0])
      .slice(0, count)
      .map(([price, amount]) => ({ price, amount }));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É orderbook
   */
  public getStats(): OrderBookStats {
    const bids = this.getBids(this.maxLevels);
    const asks = this.getAsks(this.maxLevels);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (bids.length === 0 || asks.length === 0) {
      logger.warn(
        `‚ö†Ô∏è OrderBook –ø—É—Å—Ç–æ–π! bids=${bids.length}, asks=${asks.length}`,
        LogCategory.INTERNAL
      );

      return {
        bestBid: 0,
        bestAsk: 0,
        spread: 0,
        spreadPercent: 0,
        midPrice: 0,
        bidVolume: 0,
        askVolume: 0,
        totalVolume: 0,
        bidPercent: 50,
        askPercent: 50,
      };
    }

    const bestBid = bids[0].price;
    const bestAsk = asks[0].price;

    const spread = bestAsk - bestBid;
    const midPrice = (bestBid + bestAsk) / 2;
    const spreadPercent = midPrice > 0 ? (spread / midPrice) * 100 : 0;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º—ã
    const bidVolume = bids.reduce(
      (sum, level) => sum + level.price * level.amount,
      0
    );
    const askVolume = asks.reduce(
      (sum, level) => sum + level.price * level.amount,
      0
    );
    const totalVolume = bidVolume + askVolume;

    const bidPercent = totalVolume > 0 ? (bidVolume / totalVolume) * 100 : 50;
    const askPercent = totalVolume > 0 ? (askVolume / totalVolume) * 100 : 50;

    return {
      bestBid,
      bestAsk,
      spread,
      spreadPercent,
      midPrice,
      bidVolume,
      askVolume,
      totalVolume,
      bidPercent,
      askPercent,
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–∫–∞–Ω–∞
   */
  public getSize(): { bids: number; asks: number } {
    return {
      bids: this.bids.size,
      asks: this.asks.size,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å—Ç–∞–∫–∞–Ω
   */
  public isSynced(): boolean {
    return this.bids.size > 0 && this.asks.size > 0;
  }

  public getUpdateCount(): number {
    return this.updateCount;
  }

  public getLastSyncTime(): number {
    return this.lastSyncTime;
  }

  /**
   * DEBUG: –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞–∫–∞–Ω–∞
   */
  public debug(): void {
    const bids = this.getBids(5);
    const asks = this.getAsks(5);

    console.log("\n" + "=".repeat(60));
    console.log(`üìñ ORDER BOOK DEBUG: ${this.symbol}`);
    console.log("=".repeat(60));
    console.log("\nüü¢ TOP 5 BIDS (–ø–æ–∫—É–ø–∫–∞):");
    bids.forEach((bid, i) => {
      console.log(
        `  ${i + 1}. ${bid.price.toFixed(2)} USDT √ó ${bid.amount.toFixed(4)}`
      );
    });
    console.log("\nüî¥ TOP 5 ASKS (–ø—Ä–æ–¥–∞–∂–∞):");
    asks.forEach((ask, i) => {
      console.log(
        `  ${i + 1}. ${ask.price.toFixed(2)} USDT √ó ${ask.amount.toFixed(4)}`
      );
    });

    const stats = this.getStats();
    console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
    console.log(`  Best Bid: ${stats.bestBid.toFixed(2)} USDT`);
    console.log(`  Best Ask: ${stats.bestAsk.toFixed(2)} USDT`);
    console.log(
      `  Spread: ${stats.spread.toFixed(2)} USDT (${stats.spreadPercent.toFixed(
        3
      )}%)`
    );
    console.log(
      `  –î–∞–≤–ª–µ–Ω–∏–µ: Bid ${stats.bidPercent.toFixed(
        1
      )}% / Ask ${stats.askPercent.toFixed(1)}%`
    );
    console.log("=".repeat(60) + "\n");
  }
}
